{"version":3,"sources":["fluid-config.js","KeynoteRow.jsx","KeynotesModel.js","Table.jsx","index.jsx"],"names":["containerSchema","initialObjects","myMap","SharedMap","connectionConfig","uuid","getRandomName","connection","tenantId","tokenProvider","InsecureTokenProvider","id","orderer","storage","KeynoteRow","props","className","type","onChange","e","setReference","currentTarget","value","reference","placeholder","setText","text","c_NotePrefix","c_ReferencePrefix","Table","fluidContainer","container","React","useState","sharedMap","SetNoteText","noteId","noteText","set","SetNoteReference","Array","from","keys","length","CreateNote","get","NoteIds","filter","key","includes","map","noteIdWithPrefix","substring","setChangeListener","listener","on","createKeynotesModel","model","notes","setNotes","useEffect","syncLocalAndFluidState","noteDataArr","ids","newNoteData","push","class","note","i","onClick","start","a","getContainerId","isNew","window","location","hash","containerId","client","AzureClient","createContainer","services","attach","getContainer","console","log","connected","Promise","resolve","once","ReactDOM","render","StrictMode","document","getElementById","catch","error"],"mappings":"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","file":"static/js/main.b6abb3f5.chunk.js","sourcesContent":["//import { /*AzureClientProps, AzureFunctionTokenProvider,*/ LOCAL_MODE_TENANT_ID } from \"@fluidframework/azure-client\";\r\nimport { SharedMap } from \"fluid-framework\";\r\nimport { getRandomName } from \"@fluidframework/server-services-client\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { InsecureTokenProvider } from \"@fluidframework/test-client-utils\";\r\n\r\nexport const containerSchema = {\r\n    initialObjects: { myMap: SharedMap }\r\n  };\r\n\r\nexport const userConfig = {\r\n    id: uuid(),\r\n    name: getRandomName(),\r\n};\r\n\r\n\r\nexport const connectionConfig =\r\n  { \r\n    connection: {\r\n        tenantId: \"b801a86a-3a95-4a4c-883d-edb778658a74\",\r\n        tokenProvider: new InsecureTokenProvider(\"d3a190af6ef61f8f847a7ae40b12d3f4\", { id: \"userId\" }),\r\n        orderer: \"https://alfred.westus2.fluidrelay.azure.com\",\r\n        storage: \"https://historian.westus2.fluidrelay.azure.com\",\r\n    }\r\n}\r\n// { \r\n//     connection: {\r\n//         tenantId: LOCAL_MODE_TENANT_ID,\r\n//         tokenProvider: new InsecureTokenProvider(\"fooBar\", userConfig),\r\n//         orderer: \"http://localhost:7070\",\r\n//         storage: \"http://localhost:7070\",\r\n//     }\r\n// };\r\n","import React from \"react\";\r\nimport './App.css'\r\n\r\nexport function KeynoteRow(props) {\r\n    return (\r\n        <tr className=\"whitespace-nowrap\">\r\n            <td className=\" text-md text-gray-500 font-sans border border-slate-300\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(e) => props.setReference(e.currentTarget.value)}\r\n                    value={props.reference}\r\n                    placeholder={\"key\"}\r\n                    className=\"w-full px-6 py-2 font-semibold\"\r\n                />\r\n            </td>\r\n            <td className=\"text-md text-gray-500 font-sans border border-slate-300 \">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(e) => props.setText(e.currentTarget.value)}\r\n                    value = {props.text}\r\n                    placeholder={\"Keynote\"}\r\n                    className=\"w-full px-6 py-2 hover:bg-slate-50 active:bg-slate-100 \"\r\n                />\r\n            </td>\r\n        </tr>\r\n    );\r\n}","//import { SharedMap } from \"fluid-framework\";\r\n\r\nconst c_NotePrefix = \"text_\";\r\nconst c_ReferencePrefix = \"key_\";\r\n\r\nexport function createKeynotesModel(fluidContainer) {\r\n    \r\n    const sharedMap = fluidContainer.initialObjects.myMap;\r\n\r\n    const SetNoteText = (noteId, noteText) => {\r\n        sharedMap.set(c_NotePrefix + noteId, noteText);\r\n    }\r\n\r\n    const SetNoteReference = (noteId, reference) => {\r\n\r\n        sharedMap.set(c_ReferencePrefix + noteId, reference);\r\n    }\r\n\r\n        // populate table on first run\r\n    if(Array.from(sharedMap.keys()).length === 0) {\r\n        SetNoteText(0, \"note zero\");\r\n        SetNoteReference(0, \"0\");\r\n        SetNoteText(1, \"note one\");\r\n        SetNoteReference(1, \"11\");\r\n        SetNoteText(2, \"note two\");\r\n        SetNoteReference(2, \"22\");\r\n        SetNoteText(3, \"note three\");\r\n        SetNoteReference(3, \"33\");\r\n    }\r\n\r\n    return {\r\n        CreateNote(noteId) {\r\n            const newNote = {\r\n                id: noteId,\r\n                text: sharedMap.get(c_NotePrefix + noteId),\r\n                reference: sharedMap.get(c_ReferencePrefix + noteId)\r\n            };\r\n            return newNote;\r\n        },\r\n\r\n        SetNoteReference,\r\n\r\n        SetNoteText,\r\n\r\n        get NoteIds() {\r\n            const arr = Array.from(sharedMap.keys())\r\n            .filter((key) => key.includes(c_NotePrefix))\r\n            .map((noteIdWithPrefix) => noteIdWithPrefix.substring(c_NotePrefix.length));\r\n            return (arr);\r\n        },\r\n        setChangeListener(listener) {\r\n            sharedMap.on(\"valueChanged\", listener);\r\n        },\r\n\r\n        // removeChangeListener(listener) {\r\n        //     sharedMap.off(\"valueChanged\", listener);\r\n        // }\r\n    }\r\n}","import React from \"react\";\r\nimport {KeynoteRow} from \"./KeynoteRow.jsx\";\r\nimport {createKeynotesModel} from \"./KeynotesModel.js\"\r\nimport \"./App.css\"\r\n\r\nexport function Table(props) {\r\n\r\n    const fluidContainer = props.container;\r\n    const [ model ] = React.useState(createKeynotesModel(fluidContainer));\r\n    const [ notes, setNotes ] = React.useState([]);\r\n\r\n    // runs when model changes\r\n    React.useEffect( () => {\r\n        const syncLocalAndFluidState = () => {\r\n            // construct note array\r\n            const noteDataArr = [];\r\n            const ids = model.NoteIds;\r\n            // recreate the list of keynotes to re-render them via setNotes\r\n            for (let noteId of ids) {\r\n                const newNoteData = model.CreateNote(noteId);\r\n                noteDataArr.push(newNoteData);\r\n            }\r\n            setNotes(noteDataArr);\r\n        }\r\n        // immediately sync model and ui state\r\n        syncLocalAndFluidState();\r\n        // The listener will call syncLocalAndFluidState everytime there a \"valueChanged\" event\r\n        model.setChangeListener(syncLocalAndFluidState);\r\n     }, [model] );\r\n\r\n    const SetNoteText = (id, text) => {\r\n        //console.log(\"setting keynote \"+ id + \" with text: \" + text);\r\n        model.SetNoteText(id, text);\r\n    }\r\n\r\n    const SetNoteReference = (id, reference) => {\r\n        model.SetNoteReference(id, reference);\r\n    }\r\n\r\n    const addRow = () => {\r\n        let id = Array.from(model.NoteIds).length;\r\n        model.SetNoteText(id, \"\");\r\n        model.SetNoteReference(id, \"\");\r\n    }\r\n\r\n    return(\r\n        <div class=\"flex flex-col justify-left\">\r\n            <table className=\"table-auto w-full border-collapse border-b border-gray-200 shadow \"> \r\n                <thead className=\"bg-gray-50 \">\r\n                    <tr>\r\n                        <th className=\"px-6 py-2 w-40 text-md text-gray-500 border border-slate-300 text-left\">Key</th>\r\n                        <th className=\"px-6 py-2 text-md text-gray-500 border border-slate-300 text-left\">Note</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white\">\r\n                    {notes.map((note, i) => {\r\n                        const setText = (text) => {\r\n                            SetNoteText(note.id, text);\r\n                        };\r\n                        const setReference = (reference) => {\r\n                            SetNoteReference(note.id, reference);\r\n                        }\r\n                        return (\r\n                            <KeynoteRow\r\n                                key={note.id}\r\n                                id={note.id}\r\n                                reference={note.reference}\r\n                                text = {note.text}\r\n                                setText={setText}\r\n                                setReference={setReference}\r\n                            />\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n            <button\r\n            className=\"w-full justify-left  text-left px-4 py-1 hover:bg-slate-50\"\r\n            onClick={addRow}>\r\n                <span className=\"material-icons text-left align-middle opacity-70\" >add_circle</span>\r\n            </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { AzureClient, /*AzureContainerServices */} from '@fluidframework/azure-client';\r\nimport { connectionConfig, containerSchema } from \"./fluid-config\";\r\nimport {Table} from \"./Table.jsx\";\r\n\r\nexport async function start() {\r\n    const getContainerId = () => {\r\n        let isNew = false;\r\n        if (window.location.hash.length === 0) {\r\n            isNew = true;\r\n        }\r\n        const containerId = window.location.hash.substring(1);\r\n        return { containerId, isNew };\r\n    };\r\n\r\n    const { containerId, isNew } = getContainerId();\r\n\r\n    const client = new AzureClient(connectionConfig);\r\n    let container;\r\n    let services;\r\n\r\n    if (isNew) {\r\n        ({ container, services } = await client.createContainer(containerSchema));\r\n        const containerId = await container.attach();\r\n        window.location.hash = containerId;\r\n    } else {\r\n        ({ container, services } = await client.getContainer(containerId, containerSchema));\r\n    }\r\n    if(!services) console.log(\"missing services\");\r\n\r\n    if (!container.connected) {\r\n        await new Promise((resolve) => {\r\n            container.once(\"connected\", () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Table container={container}/>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    )\r\n}\r\n\r\nstart().catch((error) => console.error(error));\r\n"],"sourceRoot":""}