{"version":3,"sources":["fluid-config.js","KeynoteRow.jsx","Table.jsx","KeynotesModel.js","themes.js","index.jsx"],"names":["containerSchema","initialObjects","myMap","SharedMap","connectionConfig","uuid","getRandomName","connection","tenantId","tokenProvider","InsecureTokenProvider","id","orderer","storage","KeynoteRow","props","TextField","appearance","onChange","e","setText","currentTarget","value","text","placeholder","Table","fluidContainer","container","React","useState","sharedMap","SetNoteText","noteId","noteText","set","Array","from","keys","length","CreateNote","get","NoteIds","setChangeListener","listener","on","createKeynotesModel","model","notes","setNotes","useEffect","syncLocalAndFluidState","noteDataArr","ids","newNoteData","push","map","note","i","className","onClick","themeNameToTheme","themeName","lightTheme","darkTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","isInverted","start","a","initializeIcons","getContainerId","isNew","window","location","hash","containerId","substring","client","AzureClient","createContainer","services","attach","getContainer","console","log","connected","Promise","resolve","once","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","catch","error"],"mappings":"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","file":"static/js/main.39bd42f8.chunk.js","sourcesContent":["import { /*AzureClientProps, AzureFunctionTokenProvider,*/ LOCAL_MODE_TENANT_ID } from \"@fluidframework/azure-client\";\r\nimport { SharedMap } from \"fluid-framework\";\r\nimport { getRandomName } from \"@fluidframework/server-services-client\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { InsecureTokenProvider } from \"@fluidframework/test-client-utils\";\r\n\r\nexport const containerSchema = {\r\n    initialObjects: { myMap: SharedMap }\r\n  };\r\n\r\nexport const userConfig = {\r\n    id: uuid(),\r\n    name: getRandomName(),\r\n};\r\n\r\n\r\nexport const connectionConfig =\r\n  { \r\n    connection: {\r\n        tenantId: \"b801a86a-3a95-4a4c-883d-edb778658a74\",\r\n        tokenProvider: new InsecureTokenProvider(\"d3a190af6ef61f8f847a7ae40b12d3f4\", { id: \"userId\" }),\r\n        orderer: \"https://alfred.westus2.fluidrelay.azure.com\",\r\n        storage: \"https://historian.westus2.fluidrelay.azure.com\",\r\n    }\r\n}\r\n// { \r\n//     connection: {\r\n//         tenantId: LOCAL_MODE_TENANT_ID,\r\n//         tokenProvider: new InsecureTokenProvider(\"fooBar\", userConfig),\r\n//         orderer: \"http://localhost:7070\",\r\n//         storage: \"http://localhost:7070\",\r\n//     }\r\n// };\r\n","import React from \"react\";\r\nimport { TextField } from \"@fluentui/react\";\r\nimport './App.css'\r\n\r\nexport function KeynoteRow(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.id}</td>\r\n            <td>\r\n                <TextField appearance=\"outline\"\r\n                    onChange={(e) => props.setText(e.currentTarget.value)}\r\n                    value = {props.text}\r\n                    placeholder={\"Keynote\"}\r\n                />\r\n            </td>\r\n        </tr>\r\n    );\r\n}","import React from \"react\";\r\nimport {KeynoteRow} from \"./KeynoteRow.jsx\";\r\nimport {createKeynotesModel} from \"./KeynotesModel.js\"\r\nimport \"./App.css\"\r\n\r\nexport function Table(props) {\r\n\r\n    const fluidContainer = props.container;\r\n    const [ model ] = React.useState(createKeynotesModel(fluidContainer));\r\n    const [ notes, setNotes ] = React.useState([]);\r\n\r\n    // runs when model changes\r\n    React.useEffect( () => {\r\n        const syncLocalAndFluidState = () => {\r\n            // construct note array\r\n            const noteDataArr = [];\r\n            const ids = model.NoteIds;\r\n            // recreate the list of keynotes to re-render them via setNotes\r\n            for (let noteId of ids) {\r\n                const newNoteData = model.CreateNote(noteId);\r\n                noteDataArr.push(newNoteData);\r\n            }\r\n            setNotes(noteDataArr);\r\n        }\r\n        // immediately sync model and ui state\r\n        syncLocalAndFluidState();\r\n        // The listener will call syncLocalAndFluidState everytime there a \"valueChanged\" event\r\n        model.setChangeListener(syncLocalAndFluidState);\r\n     }, [model] );\r\n\r\n    const SetNoteText = (id, text) => {\r\n        //console.log(\"setting keynote \"+ id + \" with text: \" + text);\r\n        model.SetNoteText(id, text);\r\n    }\r\n\r\n    const addRow = () => {\r\n        let id = Array.from(model.NoteIds).length;\r\n        model.SetNoteText(id, \"\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>Key</td>\r\n                    <td>Note</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {notes.map((note, i) => {\r\n                    const setText = (text) => {\r\n                        SetNoteText(note.id, text);\r\n                    };\r\n                    return (\r\n                        <KeynoteRow\r\n                            key={note.id}\r\n                            id={note.id}\r\n                            text = {note.text}\r\n                            setText={setText}\r\n                        />\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n        <button className=\"add-row-button\" onClick={addRow}><span className=\"material-icons\" >add_circle</span></button>\r\n        </div>\r\n    );\r\n}","//import { SharedMap } from \"fluid-framework\";\r\n\r\nexport function createKeynotesModel(fluidContainer) {\r\n    \r\n    const sharedMap = fluidContainer.initialObjects.myMap;\r\n\r\n    const SetNoteText = (noteId, noteText) => {\r\n        sharedMap.set(noteId, noteText);\r\n    }\r\n\r\n        // populate table on first run\r\n    if(Array.from(sharedMap.keys()).length === 0) {\r\n        SetNoteText(0, \"note zero\");\r\n        SetNoteText(1, \"note one\");\r\n        SetNoteText(2, \"note two\");\r\n        SetNoteText(3, \"note three\");\r\n    }\r\n\r\n    return {\r\n        CreateNote(noteId) {\r\n            const newNote = {\r\n                id: noteId,\r\n                text: sharedMap.get(noteId),\r\n            };\r\n            return newNote;\r\n        },\r\n\r\n        SetNoteText,\r\n\r\n        get NoteIds() {\r\n            return (\r\n                Array.from(sharedMap.keys())\r\n            );\r\n        },\r\n        setChangeListener(listener) {\r\n            sharedMap.on(\"valueChanged\", listener);\r\n            //valueChangeEvent = listener;\r\n        },\r\n\r\n        // removeChangeListener(listener) {\r\n        //     sharedMap.off(\"valueChanged\", listener);\r\n        // }\r\n    }\r\n}","import { createTheme } from \"@fluentui/react\";\r\n\r\n\r\nexport function normalizeThemeName(theme?) {\r\n  switch (theme) {\r\n    case \"dark\":\r\n      return \"dark\";\r\n    case \"contrast\":\r\n      return \"contrast\";\r\n    default:\r\n      return \"default\";\r\n  }\r\n}\r\n\r\nexport function themeNameToTheme(themeName) {\r\n  switch (themeName) {\r\n    case \"default\":\r\n      return lightTheme;\r\n    case \"dark\":\r\n      return darkTheme;\r\n    case \"contrast\":\r\n      return darkTheme;\r\n  }\r\n}\r\n\r\nexport const lightTheme = createTheme({\r\n  palette: {\r\n    themePrimary: \"#6264a7\",\r\n    themeLighterAlt: \"#f7f7fb\",\r\n    themeLighter: \"#e1e1f1\",\r\n    themeLight: \"#c8c9e4\",\r\n    themeTertiary: \"#989ac9\",\r\n    themeSecondary: \"#7173b0\",\r\n    themeDarkAlt: \"#585a95\",\r\n    themeDark: \"#4a4c7e\",\r\n    themeDarker: \"#37385d\",\r\n    neutralLighterAlt: \"#faf9f8\",\r\n    neutralLighter: \"#f3f2f1\",\r\n    neutralLight: \"#edebe9\",\r\n    neutralQuaternaryAlt: \"#e1dfdd\",\r\n    neutralQuaternary: \"#d0d0d0\",\r\n    neutralTertiaryAlt: \"#c8c6c4\",\r\n    neutralTertiary: \"#b9b8b7\",\r\n    neutralSecondary: \"#a2a1a0\",\r\n    neutralPrimaryAlt: \"#8b8a89\",\r\n    neutralPrimary: \"#30302f\",\r\n    neutralDark: \"#5e5d5c\",\r\n    black: \"#474645\",\r\n    white: \"#ffffff\",\r\n  },\r\n});\r\n\r\nexport const darkTheme = createTheme({\r\n  isInverted: true,\r\n  palette: {\r\n    themePrimary: \"#6264a7\",\r\n    themeLighterAlt: \"#040407\",\r\n    themeLighter: \"#10101b\",\r\n    themeLight: \"#1d1e32\",\r\n    themeTertiary: \"#3b3c63\",\r\n    themeSecondary: \"#565892\",\r\n    themeDarkAlt: \"#6e70af\",\r\n    themeDark: \"#8183bb\",\r\n    themeDarker: \"#9ea0cd\",\r\n    neutralLighterAlt: \"#000000\",\r\n    neutralLighter: \"#000000\",\r\n    neutralLight: \"#000000\",\r\n    neutralQuaternaryAlt: \"#000000\",\r\n    neutralQuaternary: \"#000000\",\r\n    neutralTertiaryAlt: \"#000000\",\r\n    neutralTertiary: \"#c8c8c8\",\r\n    neutralSecondary: \"#d0d0d0\",\r\n    neutralPrimaryAlt: \"#dadada\",\r\n    neutralPrimary: \"#ffffff\",\r\n    neutralDark: \"#f4f4f4\",\r\n    black: \"#f8f8f8\",\r\n    white: \"#000000\",\r\n  },\r\n});\r\n","import './App.css';\r\n\r\nimport { initializeIcons, ThemeProvider } from \"@fluentui/react\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { AzureClient, /*AzureContainerServices */} from '@fluidframework/azure-client';\r\nimport { connectionConfig, containerSchema } from \"./fluid-config\";\r\nimport {Table} from \"./Table.jsx\";\r\nimport { themeNameToTheme } from './themes';\r\n\r\n//const timeKey = \"time-key\";\r\nexport async function start() {\r\n    initializeIcons();\r\n    const getContainerId = () => {\r\n        let isNew = false;\r\n        if (window.location.hash.length === 0) {\r\n            isNew = true;\r\n        }\r\n        const containerId = window.location.hash.substring(1);\r\n        return { containerId, isNew };\r\n    };\r\n\r\n    const { containerId, isNew } = getContainerId();\r\n\r\n    const client = new AzureClient(connectionConfig);\r\n    let container;\r\n    let services;\r\n\r\n    if (isNew) {\r\n        ({ container, services } = await client.createContainer(containerSchema));\r\n        const containerId = await container.attach();\r\n        window.location.hash = containerId;\r\n    } else {\r\n        ({ container, services } = await client.getContainer(containerId, containerSchema));\r\n    }\r\n    if(!services) console.log(\"missing services\");\r\n\r\n    if (!container.connected) {\r\n        await new Promise((resolve) => {\r\n            container.once(\"connected\", () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <ThemeProvider theme={themeNameToTheme(\"default\")}>\r\n            <Table container={container}/>\r\n            </ThemeProvider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    )\r\n}\r\n\r\nstart().catch((error) => console.error(error));\r\n"],"sourceRoot":""}